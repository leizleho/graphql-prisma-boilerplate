type Query {
  users(
    filter: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  me: User!
}

type Mutation {
  register(name: String!, email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  updatedAt: String!
  createdAt: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

enum UserOrderByInput {
  name_ASC
  name_DESC
}
